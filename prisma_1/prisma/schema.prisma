// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String?
  role  String

  isAdmin        Boolean         @default(false)
  writtenposts   Post[]          @relation("WrittenPosts")
  // favoriteposts Post[]  @relation("FavoritePosts")
  UserPreference UserPreference?

  @@unique([email, role]) // cannot have same email and same role. this  block level attraibute
  @@index([email])
}

model UserPreference {
  id        Int     @id @default(autoincrement())
  primeuser Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}

model Post {
  id         Int        @id @default(autoincrement())
  rating     Float
  rank       Decimal
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId   Int
  // favoritedBy User? @relation("FavoritePosts", fields: [favoritedById], references: [id])
  // favoritedById Int?
  // Category   Category? @relation(fields: [categoryId], references: [id])
  // categoryId String?
  categories Category[]
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}
